{
  "name": "fireeye-detection-on-demand",
  "label": "FireEye Detection On Demand",
  "version": "1.0.0",
  "description": "FireEye Detection On Demand is a threat detection service that uncovers harmful objects in the cloud. It delivers flexible file and content scanning capabilities to identify file-borne threats in your cloud, SOC, SIEM or files uploaded to web applications. This connector facilitates the automated operations related to submit files / urls , reports, artifacts.",
  "publisher": "Community",
  "cs_approved": false,
  "cs_compatible": true,
  "category": "Forensics and Malware Analysis",
  "icon_small_name": "FireEye_Detection_32x32.png",
  "icon_large_name": "FireEye_Detection_80x80.png",
  "ingestion_supported": false,
  "ingestion_modes": [],
  "help_online": "https://docs.fortinet.com/document/fortisoar/1.0.0/fireeye-detection-on-demand/167/fireeye-detection-on-demand-v1-0-0",
  "configuration": {
    "fields": [
      {
        "title": "Server URL",
        "description": "URL of the FireEye Detection On Demand server to which you will connect and perform the automated operations. ",
        "required": true,
        "editable": true,
        "visible": true,
        "type": "text",
        "name": "server_url",
        "value": "https://feapi.marketplace.apps.fireeye.com"
      },
      {
        "title": "API key",
        "description": "API key that is configured for your account for using the FireEye Detection On Demand APIs. ",
        "required": true,
        "editable": true,
        "visible": true,
        "type": "password",
        "name": "api_key"
      },
      {
        "title": "Verify SSL",
        "description": "Specifies whether the SSL certificate for the Microsoft Azure AD Connect Health Feed is to be verified or not. By default, this option is set as True.",
        "required": false,
        "editable": true,
        "visible": true,
        "type": "checkbox",
        "name": "verify_ssl",
        "value": true
      }
    ]
  },
  "operations": [
    {
      "operation": "get_hashes",
      "title": "Get File Reputation",
      "description": "Retrieves malware results for a specific MD5 hash from FireEye Detection On Demand based on the MD5 filehash you have specified. ",
      "category": "investigation",
      "annotation": "get_hashes",
      "output_schema": {
        "md5": "",
        "is_malicious": "",
        "engine_results": {
          "dynamic_analysis": {
            "verdict": ""
          },
          "av_lookup": {
            "first_seen": "",
            "last_seen": "",
            "signature_name": [],
            "verdict": ""
          },
          "dti_lookup": {
            "first_seen": "",
            "industry": [
              ""
            ],
            "overall_weight": "",
            "display_message": [],
            "signature_name": [],
            "verdict": ""
          }
        }
      },
      "enabled": true,
      "parameters": [
        {
          "title": "File Hash",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "hash",
          "placeholder": "Only MD5 hash allowed",
          "description": "MD5 hash of a file for which you want to retrieve the malware analysis results from FireEye Detection On Demand."
        }
      ]
    },
    {
      "operation": "submit_urls",
      "title": "Submit URLs",
      "description": "Submits one or more URLs for analysis to FireEye Detection On Demand based on the list of URLs you have specified. ",
      "category": "investigation",
      "annotation": "submit_urls",
      "output_schema": {
        "status": "",
        "report_id": "",
        "md5": ""
      },
      "enabled": true,
      "parameters": [
        {
          "title": "URLs",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "hash",
          "tooltip": "Maximum of 5 URLs allowed.",
          "placeholder": "e.g. url1, url2",
          "description": "List of URLs that you want to submit for analysis to FireEye Detection On Demand. Use the '[url1,url2,...]' format to specify the URLs. You can specify a maximum of 5 URLs. "
        }
      ]
    },
    {
      "operation": "submit_file",
      "title": "Submit File",
      "description": "Submit one or more Files for analysis to FireEye Detection On Demand based on the list of attachment ID you have specified. ",
      "category": "investigation",
      "annotation": "submit_files",
      "output_schema": {
        "status": "",
        "report_id": "",
        "md5": ""
      },
      "enabled": true,
      "parameters": [
        {
          "title": "Attachment IRI",
          "required": true,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "attachment_iri",
          "placeholder": "e.g. /api/3/attachments/9d012a09-b3e4-4ae0-b774-170312d33cc7",
          "tooltip": "IRI of the file that you want to submit for analysis to FireEye Detection On Demand.",
          "description": "IRI of the file that you want to submit for analysis to FireEye Detection On Demand."
        },
        {
          "title": "Password",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "text",
          "tooltip": "Password to be used by the detection engine to decrypt the password-protected file.",
          "name": "password",
          "description": "Password to be used by the detection engine to decrypt the password-protected file. "
        },
        {
          "title": "Parameters",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "text",
          "placeholder": "e.g start -h localhost -p 5555",
          "name": "parameters",
          "description": "Command-line parameter(s) to be used by the detection engine when running the file. This parameter is mainly applicable to .exe files. For example, setting the parameter to \"start -h localhost -p 5555\" makes the detection engine run a file named \"malicious.exe\" as \"malicious.exe start -h localhost -p 5555\". "
        },
        {
          "title": "File Extraction",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "checkbox",
          "tooltip": "Enable to extract the files that are dropped from the VM during dynamic analysis.",
          "name": "file_extraction",
          "value": false,
          "description": "Select this checkbox, i.e set it to 'true' to extract the files that are dropped from the VM during dynamic analysis. You can download these extracted files using the \"Get Artifacts\" action."
        },
        {
          "title": "Memory Dump",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "checkbox",
          "tooltip": "Enable to extract the memory dump files that are dropped from the VM during dynamic analysis.",
          "name": "memory_dump",
          "value": false,
          "description": "Select this checkbox, i.e set it to 'true' to extract the memory dump files that are dropped from the VM during dynamic analysis. You can download these extracted memory dump files using the \"Get Artifacts\" action. "
        },
        {
          "title": "PCAP",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "checkbox",
          "tooltip": "Enable to extract the PCAP files that are dropped from the VM during dynamic analysis.",
          "name": "pcap",
          "value": false,
          "description": "Select this checkbox, i.e set it to 'true' to extract the PCAP files that are dropped from the VM during dynamic analysis. You can download these extractedâ€¯PCAP files using the \"Get Artifacts\" action. "
        }
      ]
    },
    {
      "operation": "get_reports",
      "title": "Get Report",
      "description": "Fetches the results of a single file submission, which is known as a 'report' from FireEye Detection On Demand based on the report ID you have specified.",
      "category": "investigation",
      "annotation": "get_report",
      "output_schema": {
        "report_id": "",
        "overall_status": "",
        "is_malicious": "",
        "started_at": "",
        "completed_at": "",
        "duration": "",
        "file_name": "",
        "file_size": "",
        "file_extension": "",
        "name": "",
        "type": "",
        "size": "",
        "md5": "",
        "sha256": "",
        "sha1": "",
        "magic": "",
        "extracted_objects": [
          {
            "submission_uuid": "",
            "object_uuid": "",
            "name": "",
            "type": "",
            "complete_time": "",
            "analyses_start_time": "",
            "verdict": "",
            "md5": "",
            "sha256": "",
            "status": "",
            "size": "",
            "is_malicious": ""
          }
        ],
        "results": [
          {
            "object_uuid": "",
            "analysis_results": [
              {
                "anomaly_types": [],
                "os_info": "",
                "engine": "",
                "job_id": "",
                "weight": "",
                "signature_name": "",
                "dynamic_analysis_uuid": ""
              }
            ]
          }
        ],
        "artifacts_info": [
          {
            "object_artifact_details": [
              {
                "object_uuid": "",
                "artifact_details": [
                  {
                    "video_path": "",
                    "dynamic_analysis_uuid": "",
                    "memory_dump": "",
                    "pcap_path": "",
                    "job_id": "",
                    "profilename": ""
                  }
                ]
              }
            ],
            "os_changes": "",
            "os_changes_type": "",
            "vm_artifacts_type": "",
            "screenshot": "",
            "vm_artifacts": "",
            "artifact_uuid": "",
            "screenshot_type": ""
          }
        ],
        "engine_results": {
          "dynamic_analysis": {
            "uuid": "",
            "is_malicious": "",
            "analysis_info": {},
            "files_analyzed": "",
            "overall_weight": "",
            "total_duration": ""
          }
        }
      },
      "enabled": true,
      "parameters": [
        {
          "title": "Report ID",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "report_id",
          "placeholder": "e.g. 992694b3-20ab-4245-9b4c-8f3a1b7ec3b6",
          "description": "ID of the report whose results you want to retrieve from FireEye Detection On Demand. The report ID is returned after you have successfully submitted a file to FireEye Detection On Demand. "
        },
        {
          "title": "Extended",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "checkbox",
          "tooltip": "Enable to see all malware engine reports",
          "name": "extended",
          "value": false,
          "description": "If you select theâ€¯Extendedâ€¯checkbox, i.e., set it to 'true', then all the malware engine reports get retrieved. By default, this is set to 'false'."
        }
      ]
    },
    {
      "operation": "get_report_url",
      "title": "Get Report URL",
      "description": "Fetches a presigned URL link to a browser viewable report of a single file submission, which is known as a 'report' from FireEye Detection On Demand based on the report ID you have specified. ",
      "category": "investigation",
      "annotation": "get_report_url",
      "output_schema": {
        "status": "",
        "presigned_report_url": ""
      },
      "enabled": true,
      "parameters": [
        {
          "title": "Report ID",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "report_id",
          "placeholder": "e.g 874da611-f82a-4331-afde-5943f4facb92",
          "description": "ID of the report whose browser viewable report presigned URL linkâ€¯you want to retrieve from FireEye Detection On Demand. The report ID is returned after you have successfully submitted a file to FireEye Detection On Demand. "
        },
        {
          "title": "Expiry",
          "required": false,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "report_id",
          "tooltip": "Specify Expiry in hours. Default value is 72 hours.",
          "placeholder": "Minimum is 1 hour, and maximum is 8760 hours allowed.",
          "description": "Expiry (in hours) for the browser viewable report presigned URL link. The default value is set at 72 hours, its minimum is set at 1 hour, and its maximum is set at 8760 hours (365 days)."
        }
      ]
    },
    {
      "operation": "get_artifacts",
      "title": "Get Artifacts",
      "description": "Fetches artifacts, like a screenshot gif file, from FireEye Detection On Demand based on the report ID, type of artifact, and artifact UUID you have specified.",
      "category": "investigation",
      "annotation": "get_artifacts",
      "output_schema": {},
      "enabled": true,
      "parameters": [
        {
          "title": "Report ID",
          "required": true,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "report_id",
          "placeholder": "e.g 874da611-f82a-4331-afde-5943f4facb92",
          "description": "ID of the report whose associated artifacts you want to retrieve from FireEye Detection On Demand. The report ID is returned after you have successfully submitted a file to FireEye Detection On Demand."
        },
        {
          "title": "Type",
          "required": true,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "artifacts_type",
          "tooltip": "Type of artifact to download",
          "description": "Type of artifact that you want to retrieve from FireEye Detection On Demand. You can specify the following options: screenshot, os_changes, and vm_artifacts. "
        },
        {
          "title": "Artifact UUID",
          "required": true,
          "visible": true,
          "editable": true,
          "type": "text",
          "name": "artifacts_uuid",
          "description": "Submitted sample can have more that one artifacts each artifact will have its on artifact uuid which is reported as part of reports api. User need to grab artifacts uuid from Get Report action."
        }
      ]
    }
  ]
}
